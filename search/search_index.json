{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My cheat sheets","text":""},{"location":"docker-grep-logs/","title":"How to grep docker and docker-compose logs","text":"<pre><code>docker-compose logs CONTAINER 2&gt;&amp;1 | grep \"PATTERN\"\n</code></pre> <pre><code>docker logs CONTAINER 2&gt;&amp;1 | grep \"PATTERN\"\n</code></pre>"},{"location":"git-cyrillic-symbols/","title":"Git cyrillic symbols","text":"<p>To enable use:</p> <pre><code>git config --global core.quotepath false\n</code></pre> <p>ref</p>"},{"location":"linux-crontab/","title":"Linux crontab","text":"<p>Crontab guru - https://crontab.guru/</p> <p>List crons:</p> <pre><code>crontab -l\n</code></pre> <p>Edit crons:</p> <pre><code>crontab -e\n</code></pre> <p>Example:</p> <pre><code>*/3 * * * * /scripts/script.sh\n</code></pre>"},{"location":"odoo-get-running-crons/","title":"Odoo get running crons (ir.cron)","text":"<pre><code>with active_cron_info as (  \n   select substring(query from 'id in \\((\\d+)\\)')::int as cron_id,  \n          query,  \n          pid as pid,  \n          usename as username,  \n          application_name as app_name,  \n          client_addr as client_addr,  \n          state as state,  \n          now() at time zone 'utc' - state_change at time zone 'utc' as time  \n   from pg_catalog.pg_stat_activity  \n   where query ilike '%ir_cron%FOR NO KEY UPDATE SKIP LOCKED%'  \n)  \nselect  \n      cron.id,  \n      cron.cron_name,  \n       cron_info.time,  \n       cron_info.username,  \n       cron_info.app_name,  \n       cron_info.client_addr,  \n       cron_info.state,  \n       cron_info.pid  \nfrom ir_cron as cron  \ninner join active_cron_info as cron_info  \n    on cron_info.cron_id = cron.id;\n</code></pre>"},{"location":"postgresql-active-queries/","title":"Postgresql active queries","text":"<pre><code>select query, now() - state_change, usename, pid, state, * \nfrom pg_stat_activity \nwhere state != 'idle' \norder by now() - state_change desc;\n</code></pre>"},{"location":"postgresql-create-index/","title":"Postgresql create index","text":"<pre><code>create index concurrently table_name_index on table_name (field);\n</code></pre>"},{"location":"postgresql-find-broken-files/","title":"Postgresql find broken files","text":"<pre><code>with d0 as (\n     select oid from pg_database where datname=current_database()\n), d1 as (\nselect pg_ls_dir as fn,\n   regexp_match(pg_ls_dir, '^([0-9]+)(.*)$') as match\nfrom d0, pg_ls_dir('base/'||d0.oid)\norder by 1\n),\nd2 as (\nselect fn, match[1] as base, match[2] as ext\nfrom d1\nwhere (fn NOT ILIKE 'pg_%')\n),\nd3 as (\nselect d.*,  pg_filenode_relation(0, base::oid) as relation\nfrom d2 d\n)\nselect fn, pg_size_pretty((pg_stat_file('base/'||d0.oid||'/'||fn)).size),(pg_stat_file('base/'||d0.oid||'/'||fn)).size\nfrom d0, d3\nwhere relation is null;\n</code></pre> <p>ref</p>"},{"location":"python-profiling-pyinstrument/","title":"Python profiling pyinstrument","text":"<p>Github</p> <pre><code>pip install pyinstrument\n</code></pre> <pre><code>from pyinstrument import Profiler\n\nprofiler = Profiler()\nprofiler.start()\n\n# code you want to profile\n\nprofiler.stop()\n\nprofiler.print()\n</code></pre> <p></p>"}]}